name: CI/CD Cinéphoria

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Construction de l image Docker
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Connexion à Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Construction et push de l image Docker
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/cinephoria-web:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/cinephoria-web:latest

  test:
    name: Exécution des tests PHP dans Docker
    runs-on: ubuntu-22.04
    needs: build

    services:
      mysql:
        image: mysql:8.2
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: lc_cinephoria
          MYSQL_USER: lamine
          MYSQL_PASSWORD: Root1234!!
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h 127.0.0.1 -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Démarrer le conteneur d application
        run: |
          docker run -d --name cinephoria_test --network=host \
            -e DB_HOST=127.0.0.1 \
            -e DB_DATABASE=lc_cinephoria \
            -e DB_USERNAME=lamine \
            -e DB_PASSWORD=Root1234!! \
            ${{ secrets.DOCKER_USERNAME }}/cinephoria-web:latest
          sleep 10  # Laisser le temps à la base de données de démarrer

      - name: Installation des dépendances PHP
        run: docker exec cinephoria_test composer install --no-interaction --prefer-dist

      - name: Exécution des tests PHPUnit
        run: docker exec cinephoria_test vendor/bin/phpunit tests

  deploy:
    name: Déploiement sur le VPS Hostinger
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Déploiement sur le VPS Hostinger
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd /var/www/html/cinephoria
          docker pull ${{ secrets.DOCKER_USERNAME }}/cinephoria-web:latest
          docker stop cinephoria_web || true
          docker rm cinephoria_web || true
          docker run -d --name cinephoria_web --network=cinephoria_network -p 80:80 ${{ secrets.DOCKER_USERNAME }}/cinephoria-web:latest
          EOF
